#!/usr/bin/env bash

export LIMA_INSTANCE=limakube
export CONF_DIR="$HOME/.limakube"
export LIMA_DIR="$HOME/.lima/$LIMA_INSTANCE"
export LIMA_HOME_DIR=/home/${USER}.linux # avoid using LIMA_HOME to not override Lima's behaviour.
export LAUNCHD_NAME=com.abiosoft.limakube.plist
export LAUNCHD_FILE="$HOME/Library/LaunchAgents/$LAUNCHD_NAME"
export SSH_PORT=68822
export ENABLE_KUBERNETES=""

# init
mkdir -p "$CONF_DIR"

# make room for m1 macs
export ARCH=amd64
[ "$(uname -m)" = "arm64" ] && export ARCH=arm64

print_usage() (
    cat <<EOF
usage: limakube <command>

commands:
  start [--kubernetes]
    Start (and/or provision) limakube VM with docker (and kubernetes
    if --kubernetes is passed).

  stop
    Stop the limakube VM.

  delete
    Delete and teardown the limakube VM and settings.

  ssh
    SSH into the limakube VM.

  reset
    Reset the kubernetes cluster.

  -h, --help
    Show this help
EOF
    if [ -z "$1" ]; then exit 0; else exit 1; fi
)

log() (
    echo >&2 "$@"
)

config_file() (
    cat >limakube.yaml <<EOF
arch: "default"
images:
  - location: "https://cloud-images.ubuntu.com/hirsute/current/hirsute-server-cloudimg-amd64.img"
    arch: "x86_64"
  - location: "https://cloud-images.ubuntu.com/hirsute/current/hirsute-server-cloudimg-arm64.img"
    arch: "aarch64"
cpus: 2
memory: "4GiB"
disk: "60GiB"
mounts:
  - location: "~"
    # CAUTION: writable SHOULD be false for the home directory.
    # Setting writable to true is possible, but untested and dangerous.
    writable: false
  - location: "/tmp/limakube"
    writable: true
ssh:
  localPort: $SSH_PORT
  loadDotSSHPubKeys: false
containerd:
  system: false
  user: false
firmware:
  legacyBIOS: false
EOF
)

assert_vm_running() (
    lima uname &>/dev/null || (echo $LIMA_INSTANCE VM is not running. Run \'$LIMA_INSTANCE start\' to start limakube && exit 1)
)

launchd_file() (
    FILE="$LAUNCHD_FILE"
    [ -f "$FILE" ] && exit 0

    cat >"$FILE" <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
    <dict>
        <key>Label</key>
        <string>com.abiosoft.limakube</string>
        <key>Program</key>
        <string>$CONF_DIR/socket.sh</string>
        <key>RunAtLoad</key>
        <true/>
        <key>KeepAlive</key>
        <true/>
        <key>ThrottleInterval</key>
        <integer>5</integer>
    </dict>
</plist>
EOF
)

socket_file() (
    FILE="$CONF_DIR"/socket.sh
    [ -f "$FILE" ] && exit 0

    cat >"$FILE" <<EOF
#!/usr/bin/env bash
rm -rf "$CONF_DIR/docker.sock"
ssh -p $SSH_PORT -i ~/.lima/_config/user -o NoHostAuthenticationForLocalhost=yes -L "$CONF_DIR/docker.sock":/var/run/docker.sock -N 127.0.0.1
EOF
    chmod +x "$FILE"
)

check_deps() (
    set -eu
    command -v lima || (echo lima not found. Run 'brew install lima' to install. && exit 1)
    command -v docker || (echo docker not found. Run 'brew install docker' to install. && exit 1)
)

check_deps_k8s() (
    command -v kubectl || (echo kubectl not found. Run 'brew install kubectl' to install. && exit 1)
)

kube() (
    lima minikube --profile limakube "$@"
)

provision_docker() (
    lima command -v docker && exit 0
    set -eu

    # docker
    lima sudo apt -y install docker.io
    lima sudo usermod -aG docker $USER
    sudo rm -rf /var/run/docker.sock
    sudo ln -s "$CONF_DIR/docker.sock" /var/run/docker.sock

    # reset vm for user docker group to reflect
    limactl stop
    limactl start
    launchctl load "$LAUNCHD_FILE"
)

teardown_docker() (
    # remove socket service
    launchctl unload $LAUNCHD_FILE
)

start_docker() (
    set -eu
    lima sudo service docker start
    launchctl start "$LAUNCHD_NAME"
)

stop_docker() (
    set -eu
    lima sudo service docker stop
    launchctl stop $LAUNCHD_NAME
)

provision_kubeconfig() (
    [ -f "$HOME/.kube/.limakube" ] && exit 0
    set -eu

    # ascertain deps for kubernetes
    check_deps_k8s

    # kube config
    HOST_DIR="$HOME/.kube"
    LIMA_DIR="$LIMA_HOME_DIR/.kube"
    mkdir -p "$HOST_DIR"

    # flatten in lima for portability
    lima kubectl config view --flatten >"$LIMA_DIR/flatconfig"

    # replace unreacheable ip with locahost
    lima sed -i 's/192.168.5.15:8443/127.0.0.1:8443/' "$LIMA_DIR/flatconfig"

    # copy to host
    limactl cp limakube:"$LIMA_DIR/flatconfig" "$HOST_DIR/lima-config"

    # flatten/merge on host
    KUBECONFIG="$HOST_DIR/config":"$HOST_DIR/lima-config" kubectl config view --raw >"$HOST_DIR/lima-config"

    # backup previous config
    [ -f "$HOME/.kube/config" ] && cp "$HOME/.kube/config" "$HOME"/.kube/config-"$(date +%s)".bak

    # set combined config as new config
    cp "$HOST_DIR/lima-config" "$HOST_DIR/config"

    # provision flag to indicate provision has been done
    touch "$HOST_DIR/.limakube"

    # clean up dirt
    rm "$HOST_DIR/lima-config"
)

teardown_kubeconfig() (
    # reset provision flag
    rm -rf "$HOME/.kube/.limakube"
    # unset kube config
    kubectl config unset users.limakube
    kubectl config unset contexts.limakube
    kubectl config unset clusters.limakube
)

provision_minikube() (
    lima command -v minikube && exit 0
    set -eu

    # minikube
    lima curl -L -o /tmp/minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-${ARCH}
    lima sudo install /tmp/minikube /usr/local/bin/minikube
    kube start --driver=none

    # kubectl
    lima curl -L -o /tmp/kubectl https://dl.k8s.io/release/v1.22.0/bin/linux/${ARCH}/kubectl
    lima sudo install /tmp/kubectl /usr/local/bin/kubectl
)

teardown_minikube() (
    kube delete
    teardown_kubeconfig
)

start_minikube() (
    set -eu
    kube status || exit 0
    kube start --driver=none
    provision_kubeconfig
)

stop_minikube() (
    kube status && kube stop
)

provision_vm() (
    set -eu
    provision_docker
    [ -n "$ENABLE_KUBERNETES" ] && provision_minikube
)

stop_vm() (
    set -eu
    assert_vm_running
    stop_minikube
    stop_docker
    limactl stop $LIMA_INSTANCE
)

teardown_vm() (
    set -eu
    assert_vm_running

    teardown_minikube
    teardown_docker

    # delete vm
    stop_vm
    limactl delete $LIMA_INSTANCE
)

start_vm() (
    set -eu

    [ "$1" = "--kubernetes" ] && export ENABLE_KUBERNETES=1

    if [ -f "$LIMA_DIR" ]; then
        limactl start $LIMA_INSTANCE
    else
        config_file
        limactl start limakube.yaml
        rm limakube.yaml
    fi

    provision_vm
    start_docker
    start_minikube
)

lima_ssh() (
    set -eu
    assert_vm_running
    lima
)

reset_minikube() (
    set -eu
    assert_vm_running
    kube status || (echo Kubernetes is not enabled. && exit 0)
    teardown_minikube
    kube start --driver=none
)

case "$1" in
start)
    shift
    start_vm "$@"
    ;;
stop)
    stop_vm
    ;;
delete)
    teardown_vm
    ;;
ssh)
    lima_ssh
    ;;
reset)
    reset_minikube
    ;;
-h | --help)
    print_usage
    ;;
"")
    print_usage 1
    ;;
*)
    log "invalid arg '$1'. view help with 'limakube --help'."
    exit 1
    ;;
esac
